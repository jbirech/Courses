WEBVTT

00:00.930 --> 00:06.210
In the last section we finished up the input component and we also do this smaller factor on our blog

00:06.210 --> 00:06.860
and form.

00:06.870 --> 00:12.300
So now we make reference to this dot state DOT email to get the current e-mail address that's in that

00:12.300 --> 00:13.230
input.

00:13.620 --> 00:19.170
We could have again just as easily let this thing as text and we could text here absolutely no issue.

00:19.380 --> 00:25.320
However I find it a lot more clear to make sure that my property names match up to the actual meaning

00:25.320 --> 00:26.790
of the property as well.

00:26.790 --> 00:33.150
So in this case this piece of state right here contains the e-mail address so this does state that e-mail

00:33.180 --> 00:37.170
makes a lot more sense than this start state text.

00:37.910 --> 00:38.150
OK.

00:38.160 --> 00:43.150
We're going to move forward now and we are going to focus on hooking up the password input.

00:43.260 --> 00:47.660
So we've already got her e-mail but we also need to receive a password as well.

00:47.790 --> 00:50.790
And that's the purpose of this card section component that we placed right here.

00:50.790 --> 00:57.850
It was going to wrap the password input so we're going to use the same strategy as we did with the e-mail.

00:57.880 --> 01:03.860
We're going to initialize a piece of state called password that is going to hold the password that's

01:03.870 --> 01:06.110
sitting inside the input.

01:06.240 --> 01:11.400
We will then create a new input tag and place it inside of this existing card section.

01:11.400 --> 01:13.740
So let's go ahead and get started.

01:13.950 --> 01:20.420
First we will start off by initializing another piece of state called Password.

01:20.820 --> 01:22.620
And it's just that easy.

01:22.620 --> 01:28.680
Next we'll go on down to the dangling card section that we've got and I'm going to turn this into a

01:28.680 --> 01:34.260
expanded tag and then side if you will place the input.

01:34.610 --> 01:40.200
So we'll say input and then I will make it a multi line tag like so I know that we're gonna need to

01:40.200 --> 01:42.280
pass a lot of props.

01:42.300 --> 01:46.750
I'll give it a placeholder of lower case password again.

01:46.800 --> 01:51.630
I'd like to make sure that the placeholders that I have for my inputs kind of look like what the user

01:51.630 --> 01:53.450
might enter into that field.

01:53.460 --> 01:59.670
So in the case of the e-mail having a placeholder like user ID email that makes sense for the password.

01:59.900 --> 02:04.170
And you know the password is different for every one song and put lowercase password.

02:04.170 --> 02:08.240
Just to kind of make people think OK you know this is my password whatever.

02:09.820 --> 02:13.450
Next we will tell this input what its value is supposed to be.

02:13.490 --> 02:18.000
So we'll say hey your value is going to be this state DOT password.

02:18.580 --> 02:25.420
And then we will add on the onchange text event handler so on change text and remember we pass this

02:25.420 --> 02:30.860
thing a function and whatever we pass to it will be text that the user just entered.

02:31.240 --> 02:39.860
So enter in password as the argument whenever the thing gets called We will update our password piece

02:39.910 --> 02:40.710
of state.

02:40.870 --> 02:46.870
So again I want to point out and I know that I point this out all the time but honestly it leads to

02:46.870 --> 02:48.130
a lot of confusion.

02:48.130 --> 02:54.160
Just remember that the argument that I receive here I'm I'm calling it password but it is the text that

02:54.160 --> 02:55.780
the user just entered.

02:55.780 --> 03:01.730
So I can call this password I can call it text I can call it new update whatever I want to call it.

03:01.960 --> 03:03.370
I choose to call it password.

03:03.370 --> 03:09.620
Just make sure that it's really clear hey this is the password that the user just typed in.

03:09.700 --> 03:14.300
Now the very last thing that we need to do is make sure we pass in a label as well.

03:14.500 --> 03:19.950
So I'm going to add in a label property and for this I'll just say keep it nice and simple just say

03:19.960 --> 03:20.570
password.

03:20.620 --> 03:23.630
That's all we really need here.

03:23.650 --> 03:23.980
All right.

03:23.980 --> 03:25.900
So let's test out the simulator.

03:25.930 --> 03:31.330
I will refresh and all right here's our password field.

03:31.380 --> 03:36.430
So let's now test it out and click in and start typing out my secret.

03:36.450 --> 03:37.890
Oh wait a minute.

03:38.360 --> 03:39.120
Oh.

03:39.510 --> 03:44.910
Our password is being answered in plain text right here which is definitely not the intent.

03:45.090 --> 03:49.710
We definitely don't want to make sure we don't want our password to be available in plain text where

03:49.980 --> 03:54.570
say anyone looking over this person's shoulder is going to be able to see that the entered password

03:54.570 --> 03:55.260
here.

03:55.290 --> 03:59.790
So we need to make sure instead that the paths are going to show up as like stars or something to the

03:59.790 --> 04:02.630
user after they enter.

04:02.940 --> 04:09.270
Fortunately that text input tag that we've been using as kind of the primitive behind the input component

04:09.630 --> 04:14.050
supports secure text entry or kind of password input.

04:14.160 --> 04:17.730
All we have to do is pass a prop to our text input tag.

04:17.760 --> 04:23.640
By the way I'm in my input component right now so I'll pass an additional proc to the textbook input

04:23.670 --> 04:27.880
here and tell it hey you are made for showing a password please.

04:27.880 --> 04:33.060
Surely your characters with an asterisk or something like that just to obstruct anyone from looking

04:33.060 --> 04:35.130
over this person's shoulder.

04:35.670 --> 04:43.420
So to do so all we have to do is add in a nother property called Secure text entry.

04:43.650 --> 04:53.880
If we pass in secure text entry of true then the password will be basically the input is going to be

04:53.880 --> 04:57.180
obstructed or it's the obfuscated.

04:57.180 --> 04:59.330
Now you'll notice that yes Lintas complain here.

04:59.340 --> 05:02.520
It says value must be omitted for boolean attributes.

05:02.670 --> 05:08.410
So what this means to say is you'll notice that I am passing in a prompt secure a text entry of true.

05:08.640 --> 05:10.800
This is a little bit of a gotcha with GSX.

05:10.820 --> 05:12.470
Now let me love you very clear.

05:12.540 --> 05:13.320
This is valid.

05:13.320 --> 05:19.650
GSX that we have right here but by convention whenever we have a boolean property so we're just passing

05:19.680 --> 05:21.020
something as true.

05:21.060 --> 05:22.910
In this case you are just flat out true.

05:23.160 --> 05:28.310
We can take a little bit of a shortcut by just listing the property.

05:28.530 --> 05:35.160
So just by listing secure text entry This means that we're going to pass in true or false whatever it

05:35.160 --> 05:37.160
might be.

05:37.170 --> 05:42.960
Now we do want to make sure that our input is not always showing a secure Test century.

05:43.080 --> 05:46.200
We want to be able to be customized by the parent component.

05:46.200 --> 05:54.390
So the parents decide you know what yes I do want this thing to be hidden or I want it to be or not

05:54.390 --> 05:58.180
hidden by want this to be a secure Test century or do you not want it to be.

05:58.410 --> 06:06.410
So to make sure that's the case we will add in another prop short and put it will take secure text entry.

06:06.420 --> 06:12.450
So we're asking it the exact same thing now that we are going to use some prop here.

06:12.480 --> 06:12.750
OK.

06:12.750 --> 06:19.620
Now we do in fact have to you assign this to a prop so I'm going to assign it the proper security next

06:19.620 --> 06:20.530
century.

06:20.940 --> 06:28.620
So now if inside of our component when we create an input tag if we pass in secure text entry of True

06:29.000 --> 06:32.010
that will be passed to our tag as true.

06:32.010 --> 06:38.040
And if we pass false or undefined first security next century the thing is not going to consider itself

06:38.040 --> 06:39.740
to be a password input.

06:40.230 --> 06:45.890
So now all we have to do is flip back over to our blog and forum and we're going to decide of our two

06:45.900 --> 06:49.630
inputs which one needs to be secure next century.

06:49.650 --> 06:54.210
So the email one probably doesn't need security next century like we just want the user to see what

06:54.210 --> 06:57.570
that thing looks like or you know what the actual value is that they've entered.

06:57.570 --> 07:01.690
So on this one we will not enter in any property whatsoever.

07:01.980 --> 07:08.200
So when the input is created it's going to consider secure text entry to be undefined.

07:08.460 --> 07:14.400
So we're going to pass undefined to this product right here and undefine with GSX is basically the same

07:14.400 --> 07:15.350
thing is false.

07:15.360 --> 07:17.090
So it's going to think that OK.

07:17.130 --> 07:19.410
Must not want secure text entry.

07:19.950 --> 07:25.860
But in the case of our password field we do want that secure text entry want to pass in secure text

07:25.890 --> 07:26.420
entry.

07:26.430 --> 07:27.310
True.

07:27.420 --> 07:36.450
So to do that we can just say secure text entry and again by just listing this prop it will show up

07:36.450 --> 07:39.090
inside of the input as being a value.

07:39.090 --> 07:44.450
True like just listing it means it's going to show up as the value true inside of this component.

07:44.730 --> 07:51.090
So now when we render this input input secure text entry is going to come in as true.

07:51.330 --> 07:55.390
We're going to pass true to the text input and boom there you go.

07:55.990 --> 07:57.890
OK let's test something a simulator.

07:57.890 --> 08:03.690
Now I'll refresh and I'll put in my user G-mail dot com.

08:03.870 --> 08:10.320
OK it looks good and my password and perfect so it's nicely obfuscated.

08:10.380 --> 08:11.220
Nice round dot.

08:11.220 --> 08:15.560
So anyone looking over our user shoulder is not going to be able to see this person's password in plain

08:15.560 --> 08:16.610
text.

08:17.070 --> 08:17.540
OK.

08:17.580 --> 08:19.130
This looks fantastic.

08:19.140 --> 08:21.000
I think we're just about done with the form.

08:21.000 --> 08:26.050
The last thing we need to do is check to see whether or not the users email and passer is correct.

08:26.070 --> 08:29.820
Like you know whether or not they actually entered the correct logon information.

08:29.910 --> 08:32.170
So let's continue the next section and start.

08:32.170 --> 08:35.820
Focus on doing the actual authentication part of our application.
