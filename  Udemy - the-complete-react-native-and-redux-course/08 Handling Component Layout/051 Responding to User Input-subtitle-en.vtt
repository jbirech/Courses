WEBVTT

00:00.680 --> 00:03.800
In the less sexually added some styling or button tagged.

00:03.930 --> 00:06.410
But still nothing happens whenever we press it.

00:06.420 --> 00:12.630
Besides that visual effect all the touchable components out there are so touchable opacity touchable

00:12.630 --> 00:18.310
highlight and the other two that we looked at are some of the few components and Riak native that allows

00:18.310 --> 00:21.090
us to directly catch feedback from the user.

00:21.270 --> 00:22.470
So the idea here is simple.

00:22.470 --> 00:26.960
Whenever the user presses on something they expect something to occur right.

00:27.150 --> 00:34.440
So we need to add a hook or a catch something into our component that says whenever a user presses this

00:34.440 --> 00:40.080
thing right here runs some code you know open up the user's web browser maybe fetch a list of posts

00:40.080 --> 00:44.040
or delete a post or tweet something you know whatever it might be.

00:44.040 --> 00:47.160
So of course re-act native has us covered on this topic.

00:47.250 --> 00:53.460
We can optionally add a prop to the touchable opacity called on press.

00:53.460 --> 00:55.650
So let's do it now.

00:55.950 --> 01:02.790
We pass a function to on press and then when ever the touchable opacity is pressed by a user that function

01:02.790 --> 01:03.880
will be called.

01:03.900 --> 01:06.780
So let's just throw in some dummy function right now.

01:06.960 --> 01:11.820
Or throwing a console log of preste like so.

01:11.820 --> 01:14.180
So I passed a federal function.

01:14.640 --> 01:20.610
So my expectation is that whenever a user presses on a touch of capacity I should see a console log

01:20.610 --> 01:21.790
of preste.

01:21.810 --> 01:31.060
So let's give this a shot out and simulator of First bring up my chrome debugger all refresh my simulator.

01:33.590 --> 01:41.230
So then I'll do my click here and you'll notice that my console over here is lagging behind just a little

01:41.230 --> 01:41.400
bit.

01:41.410 --> 01:46.230
But eventually I get up press press press press first press so on and so on.

01:46.360 --> 01:46.640
OK.

01:46.660 --> 01:48.900
So definitely the console log appears.

01:49.150 --> 01:49.880
So the trick here.

01:49.900 --> 01:55.180
The real challenge is just remembering a bit of trivia about how we handle user input.

01:55.540 --> 02:02.920
If we want to handle a tap event from the user we can add a touchable highlight or a opacity tag Whichever

02:02.920 --> 02:10.480
one we might want and create an on press handler the press handler will then be called whenever the

02:10.480 --> 02:12.840
user taps on the element.

02:12.930 --> 02:14.560
So that's that's like step one here.

02:14.560 --> 02:20.550
Now we know when a user is tapping on this thing but we saw two more challenges.

02:20.860 --> 02:26.420
Remember our ultimate goal is to direct the user to a Web site where they can actually buy sell album.

02:26.640 --> 02:31.520
Second Right now we are creating this on click handler inside of this component.

02:31.520 --> 02:33.710
This like button component right.

02:33.880 --> 02:36.240
But we want this button to be reusable.

02:36.340 --> 02:42.100
So in other words we don't want this button to know that hey whenever you are pressed you should open

02:42.100 --> 02:47.020
like some web site because that would completely defeat the purpose of making a reusable component.

02:47.140 --> 02:55.240
If we put a function right here that said whenever you're pressed open up a Web site it would be a very

02:55.240 --> 02:57.430
particular use case for a button.

02:57.430 --> 03:03.280
So instead we need to have some way to make sure we've got very generic very general logic inside of

03:03.280 --> 03:08.380
this button component right here where we can reuse it with other components completely different use

03:08.380 --> 03:10.750
cases in the future.

03:10.810 --> 03:12.830
So let's tackle that challenge first.

03:13.090 --> 03:14.170
Here's how going to take care of it.

03:14.170 --> 03:18.430
First we're going to kind of walk through the code and then we're going to talk about are you saying

03:18.430 --> 03:21.400
we're going to lay out the code and we'll talk about exactly what's going on.

03:21.730 --> 03:26.740
So first I'm going to flip over to Allum detail so here's album detail.

03:26.740 --> 03:31.670
I'm inside the render function and I'm going to find our button tagged towards the bottom.

03:31.900 --> 03:34.790
So here's my card section inside of album detail.

03:34.960 --> 03:42.740
Here's my button tag I'm going to press or excuse me I'm going to provide a prop of on press this button

03:44.050 --> 03:49.070
and inside of it I'm going to love the album's title.

03:49.400 --> 03:55.040
So I remember the album detail has a title property floating around so I'm going to cancel that title.

03:55.450 --> 04:00.390
So now I am passing a prop called on press the button.

04:00.390 --> 04:07.000
One thing I want to make really clear here this on press is not going to be just like naturally just

04:07.000 --> 04:09.070
magically consumed by the button.

04:09.200 --> 04:13.720
We have to make sure that we actually wire up this on press prop inside the button.

04:13.780 --> 04:17.820
I could have just as easily called this thing when pressed or something.

04:17.890 --> 04:20.140
You know I could have called it anything I wanted.

04:20.140 --> 04:23.400
I'm just choosing to call the prop on press.

04:23.590 --> 04:29.350
But the point I'm really trying to convey here is calling this function on press is not the same as

04:29.350 --> 04:36.490
passing the touchable opacity in on press prop in the case of the touchable touch of opacity isn't expecting

04:36.580 --> 04:38.200
a prop of press.

04:38.410 --> 04:44.240
But right now as our button is put together there's no concept of an unpressed prop for the button.

04:44.290 --> 04:49.630
So we need to make sure that our button actually makes use of that on press callback that we just added

04:49.630 --> 04:51.510
in here.

04:51.670 --> 04:56.980
So when we go back to button and I'm going to say hey touchable opacity whenever you get pressed whenever

04:56.980 --> 05:02.970
someone presses you I want you to run a function that is provided by the parent component.

05:03.220 --> 05:08.330
And so that parent component you know the thing that we want to run here is coming from the prop's object.

05:08.330 --> 05:11.030
It's going to be prop's dot on press.

05:11.050 --> 05:16.080
So let's do a little bit of destructuring to get access to that callback.

05:16.120 --> 05:23.170
So years on press and just be really clear this on press reference right here is exactly equal to this

05:23.170 --> 05:25.540
fadder a function inside of the album detail.

05:25.600 --> 05:29.160
So same exact function being passed down as a prop.

05:29.600 --> 05:37.630
Now inside the button will say whenever you get pressed I want you to run that function that was declared

05:37.670 --> 05:38.340
the parent.

05:38.570 --> 05:38.990
That's it.

05:39.020 --> 05:40.230
That's all you have to do.

05:40.610 --> 05:45.720
So now our button should be a little bit more usable but let's test this out in the simulator first.

05:45.740 --> 05:47.340
Just to make sure it's working.

05:47.840 --> 05:52.780
So now our expectation is that whenever we press on a button we should see the album's title because

05:52.790 --> 05:54.380
it's a lot.

05:54.760 --> 05:58.480
So in a way just a minute from my console to kind of warm up.

05:58.580 --> 05:59.810
There you go.

06:00.440 --> 06:02.930
All right so there is Taylor Swift.

06:03.140 --> 06:05.170
I can go down to the next album.

06:06.520 --> 06:12.280
Fearless speak now and so on.

06:12.660 --> 06:13.150
Let's.

06:13.230 --> 06:13.770
What the heck.

06:13.890 --> 06:14.180
OK.

06:14.200 --> 06:14.760
99.

06:14.790 --> 06:15.680
There you get the idea.

06:15.690 --> 06:17.220
You get the idea.

06:18.060 --> 06:18.390
OK.

06:18.390 --> 06:20.940
So just read you one last time.

06:20.940 --> 06:24.500
This is how we make reusable components with reactor I should say.

06:24.510 --> 06:28.940
This is another technique that we use for making reusable components with re-act native.

06:29.190 --> 06:35.430
I realized that my button component right here needs to do something differently every single time the

06:35.430 --> 06:37.300
user presses on it across.

06:37.310 --> 06:41.160
You know however many times I make a button components on my application.

06:41.370 --> 06:46.770
So rather than telling the button hey whenever you're pressed please open some web site.

06:46.910 --> 06:49.440
In hard coding not inside the button component.

06:49.440 --> 06:56.310
I instead decided to add in a prop of on press and I tell the button hey whenever you get called call

06:56.310 --> 07:02.610
that Paran prop that was passed to you know call that call back and whatever specific behavior was in

07:02.610 --> 07:05.110
there go ahead and let that thing run.

07:05.950 --> 07:06.320
OK.

07:06.360 --> 07:09.420
So this is good.

07:09.560 --> 07:10.580
Good call right here.

07:10.620 --> 07:12.140
Let's continue the next section.

07:12.180 --> 07:17.750
And we're going to figure out how to open a website whenever user presses on that button.
